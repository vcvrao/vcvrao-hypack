


c****************************************************************************
c
c		C-DAC Tech Workshop : hyPACK-2013
c                           October 15-18, 2013
c
c   Example   9   : SeqPrg_BestPerformance.txt
c
c   Objective     : On a processor that can execute one floating point 
c                   multiply, one floating point addition/subtraction, and 
c                   one memory reference per cycle, what's the best 
c                   performance you could expect from the following loop ? 
c
c                       do  10,  i  = 1, 10000
c                    10 a(i) = b(i) *c(i) - d(i)* e(i)
c
c   Input         : None
c
c   Output        : None
c
******************************************************************************/


        
 Q. On a processor that can execute one floating point multiply, one
    floating point addition/subtraction, and one memory reference per cycle,
    what's the best performance you could expect from the following loop ?

                    DO I = 1, 10000
                 10 A(I) = B(I) *C(I) - D(I)* E(I)

   
 Sol. 

     This construct when compiled using SunWorkshop 6.0 f77 compiler
     with -S compiler option, we obtain a .s extension file which contains
     the equivalent assembly code for the program as shown:


!    6	      DO 10 I = 1, 10000

	mov	1,%l0
	st	%l0,[%l1-4]

	! block 3
.L_y0:
	sethi	%hi(10000),%l5
	or	%l5,%lo(10000),%l5
	sethi	%hi(GPB.sample.i),%l6
	or	%l6,%lo(GPB.sample.i),%l6
.L17:

!    7	   10 A(I) = B(I) *C(I) - D(I)* E(I)

.L12:
	ld	[%l6+0],%l0
	sll	%l0,2,%l2
	ld	[%i1+%l2],%l3
	ld	[%i2+%l2],%l1
	smul	%l3,%l1,%l4
	ld	[%i3+%l2],%l3
	ld	[%i4+%l2],%l1
	smul	%l3,%l1,%l1
	sub	%l4,%l1,%l1
	st	%l1,[%i5+%l2]
	ld	[%l6+0],%l0
	add	%l0,1,%l1
	cmp	%l1,%l5
	ble	.L17
	st	%l1,[%l6+0]

     The above fragment named .L12 is the assembly code for one iteration of 
     the loop.

     There are 6 memory references and two floating point multiplies and
     one subtraction operation and in a cycle only one memory refernce can
     be performed along with other operations. Irrespective of howmuch the 
     operations are pipelined or made parallel, they can be atmost overlapped
     with the memory references involved as the other operations cannot be done
     unless the memory references are done and also memory references for
     next iterations cannot be overlapped with present iteration as already
     there are instructions related to memory references in present iteration
     pending. 

     So, the total number of cycles per iteration = 6 cycles

     The total number of cycles needed            = 60000 cycles

     On a processor with clock speed n Hz,
         
     Time taken for n cycles                      = 1 second
     Time taken for 60000 cycles                  = 60000/n seconds
     Performance in flops/sec                     = Flops/Time
                                                  = (10000*3)/(60000/n)
                                                  = n/2 flops/sec


                                            
            
     
          
